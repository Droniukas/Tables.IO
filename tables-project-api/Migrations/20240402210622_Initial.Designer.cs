// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using tables_project_api.Data;

#nullable disable

namespace tables_project_api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240402210622_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("tables_project_api.Models.ColorValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ColumnColorsValuesId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnColorsValuesId");

                    b.ToTable("ColorValue");
                });

            modelBuilder.Entity("tables_project_api.Models.Column", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Columns");
                });

            modelBuilder.Entity("tables_project_api.Models.ColumnColorsValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColumnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId")
                        .IsUnique();

                    b.ToTable("ColumnColorsValues");
                });

            modelBuilder.Entity("tables_project_api.Models.ColumnIsBottomRowValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColumnId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId")
                        .IsUnique();

                    b.ToTable("ColumnIsBottomRowValues");
                });

            modelBuilder.Entity("tables_project_api.Models.Datacell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColumnId")
                        .HasColumnType("int");

                    b.Property<string>("DateRemoved")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RowId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.ToTable("Datacells");
                });

            modelBuilder.Entity("tables_project_api.Models.Datepicker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColumnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId")
                        .IsUnique();

                    b.ToTable("Datepickers");
                });

            modelBuilder.Entity("tables_project_api.Models.Dropdown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColumnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId")
                        .IsUnique();

                    b.ToTable("Dropdowns");
                });

            modelBuilder.Entity("tables_project_api.Models.DropdownOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DropdownId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DropdownId");

                    b.ToTable("DropdownOptions");
                });

            modelBuilder.Entity("tables_project_api.Models.Row", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DateRemoved")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");
                });

            modelBuilder.Entity("tables_project_api.Models.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("tables_project_api.Models.ColorValue", b =>
                {
                    b.HasOne("tables_project_api.Models.ColumnColorsValues", null)
                        .WithMany("ColorsValues")
                        .HasForeignKey("ColumnColorsValuesId");
                });

            modelBuilder.Entity("tables_project_api.Models.Column", b =>
                {
                    b.HasOne("tables_project_api.Models.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("tables_project_api.Models.ColumnColorsValues", b =>
                {
                    b.HasOne("tables_project_api.Models.Column", "Column")
                        .WithOne("ColumnColorsValues")
                        .HasForeignKey("tables_project_api.Models.ColumnColorsValues", "ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Column");
                });

            modelBuilder.Entity("tables_project_api.Models.ColumnIsBottomRowValue", b =>
                {
                    b.HasOne("tables_project_api.Models.Column", "Column")
                        .WithOne("ColumnIsBottomRowValue")
                        .HasForeignKey("tables_project_api.Models.ColumnIsBottomRowValue", "ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Column");
                });

            modelBuilder.Entity("tables_project_api.Models.Datacell", b =>
                {
                    b.HasOne("tables_project_api.Models.Column", "Column")
                        .WithMany()
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("tables_project_api.Models.Row", "Row")
                        .WithMany("Datacells")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("tables_project_api.Models.Datepicker", b =>
                {
                    b.HasOne("tables_project_api.Models.Column", "Column")
                        .WithOne("Datepicker")
                        .HasForeignKey("tables_project_api.Models.Datepicker", "ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Column");
                });

            modelBuilder.Entity("tables_project_api.Models.Dropdown", b =>
                {
                    b.HasOne("tables_project_api.Models.Column", "Column")
                        .WithOne("Dropdown")
                        .HasForeignKey("tables_project_api.Models.Dropdown", "ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Column");
                });

            modelBuilder.Entity("tables_project_api.Models.DropdownOption", b =>
                {
                    b.HasOne("tables_project_api.Models.Dropdown", "Dropdown")
                        .WithMany("Options")
                        .HasForeignKey("DropdownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dropdown");
                });

            modelBuilder.Entity("tables_project_api.Models.Row", b =>
                {
                    b.HasOne("tables_project_api.Models.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("tables_project_api.Models.Column", b =>
                {
                    b.Navigation("ColumnColorsValues");

                    b.Navigation("ColumnIsBottomRowValue");

                    b.Navigation("Datepicker");

                    b.Navigation("Dropdown");
                });

            modelBuilder.Entity("tables_project_api.Models.ColumnColorsValues", b =>
                {
                    b.Navigation("ColorsValues");
                });

            modelBuilder.Entity("tables_project_api.Models.Dropdown", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("tables_project_api.Models.Row", b =>
                {
                    b.Navigation("Datacells");
                });

            modelBuilder.Entity("tables_project_api.Models.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Rows");
                });
#pragma warning restore 612, 618
        }
    }
}
