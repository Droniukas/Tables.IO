using AutoMapper;
using System.Net;
using System.Text;
using System.Text.Json;
using tables_project_api.Dtos;
using tables_project_api.Interfaces;
using tables_project_api.Models;


namespace tables_project_api.Services
{
    public class TableService : ITableService
    {
        private readonly ITableRepository _tableRepository;
        private readonly IMapper _mapper;

        public TableService(ITableRepository tableRepository, IMapper mapper)
        {
            _tableRepository = tableRepository;
            _mapper = mapper;
        }

        public TableReturnDto getTableByUserId(int userId)
        {
            System.Diagnostics.Debug.WriteLine(userId + "heres");
            Table? table = _tableRepository.getTableByUserId(userId);
            if (table == null) throw new Exception(message: "invalid userId");
            return _mapper.Map<TableReturnDto>(table);
        }

        public AutoGeneratedJobDataDto autoGenerateJobData(InputURLDto inputURLDto)
        {
            ScrapedJobDataDto scrapedData = getScrapedJobData(inputURLDto);
            DateTime currentDate = DateTime.UtcNow.Date;
            return new AutoGeneratedJobDataDto()
            { Company = scrapedData.Company, DateApplied = currentDate, Location = scrapedData.Location, Position = scrapedData.Position };
        }

        private ScrapedJobDataDto getScrapedJobData(InputURLDto inputURLDto)
        {
            var client = new HttpClient();
            client.BaseAddress = new Uri("http://127.0.0.1:8000/");

            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

            var json = JsonSerializer.Serialize(inputURLDto);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            HttpResponseMessage response = client.PostAsync("extractData", content).Result;
            if (response.IsSuccessStatusCode)
            {
                Stream? responseContent = response.Content.ReadAsStreamAsync().Result;
                ScrapedJobDataDto? postResponse = JsonSerializer.Deserialize<ScrapedJobDataDto>(responseContent, options);
                if (postResponse == null) throw new Exception("Server error");
                return postResponse;
            }
            else
            {
                if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    throw new Exception("Invalid URL");
                }
                else
                {
                    throw new Exception("Server error");
                }
            }
        }
    }
}
